/* Инфо
 
    * Паттерн Хранитель (Memento) позволяет выносить внутреннее состояние объекта за его пределы 
      для последующего возможного восстановления объекта без нарушения принципа инкапсуляции.

    * Когда использовать Memento?

        * Когда нужно сохранить состояние объекта для возможного последующего восстановления

        * Когда сохранение состояния должно проходить без нарушения принципа инкапсуляции

        * То есть ключевыми понятиями для данного паттерна являются сохранение внутреннего состояния 
          и инкапсуляция, и важно соблюсти баланс между ними. Ведь, как правило, если мы не нарушаем 
          инкапсуляцию, то состояние объекта хранится в объекте в приватных переменных. И не всегда 
          для доступа к этим переменным есть методы или свойства с сеттерами и геттерами. Например, 
          в игре происходит управление героем, все состояние которого заключено в нем самом - оружие 
          героя, показатель жизней, силы, какие-то другие показатели. И нередко может возникнуть ситуация, 
          сохранить все эти показатели во вне, чтобы в будущем можно было откатиться к предыдущему уровню 
          и начать игру заново. В этом случае как раз и может помочь паттерн Хранитель.
*/

using Memento;

class Program
{
    static void Main(string[] args)
    {
        Hero hero = new Hero();
        hero.Shoot(); // делаем выстрел, осталось 9 патронов
        GameHistory game = new GameHistory();

        game.History.Push(hero.SaveState()); // сохраняем игру

        hero.Shoot(); //делаем выстрел, осталось 8 патронов

        hero.RestoreState(game.History.Pop());

        hero.Shoot(); //делаем выстрел, осталось 8 патронов

        Console.Read();
    }
}