/* Инфо

    * Мост (Bridge) - структурный шаблон проектирования, который позволяет отделить абстракцию 
      от реализации таким образом, чтобы и абстракцию, и реализацию можно было изменять независимо 
      друг от друга.

    * Даже если мы отделим абстракцию от конкретных реализаций, то у нас все равно все наследуемые 
      классы будут жестко привязаны к интерфейсу, определяемому в базовом абстрактном классе. 
      Для преодоления жестких связей и служит паттерн Мост.

    * Когда использовать данный паттерн?

    * Когда надо избежать постоянной привязки абстракции к реализации

    * Когда наряду с реализацией надо изменять и абстракцию независимо друг от друга. 
      То есть изменения в абстракции не должно привести к изменениям в реализации

    * Общая реализация паттерна состоит в объявлении классов абстракций и классов реализаций 
      в отдельных параллельных иерархиях классов.

    * Теперь рассмотрим реальное применение. Существует множество программистов, но одни являются 
      фрилансерами, кто-то работает в компании инженером, кто-то совмещает работу в компании и фриланс. 
      Таким образом, вырисовывается иерархия различных классов программистов. Но эти программисты могут 
      работать с различными языками и технологиями. И в зависимости от выбранного языка деятельность 
      программиста будет отличаться. Для решения описания данной задачи в программе на C# используем 
      паттерн Мост:
*/

using Bridge.Classes;
using Bridge.Classes.Base;

class Program
{
    static void Main(string[] args)
    {
        // создаем нового программиста, он работает с с++
        Programmer freelancer = new FreelanceProgrammer(new CPPLanguage());
        freelancer.DoWork();
        freelancer.EarnMoney();
        // пришел новый заказ, но теперь нужен c#
        freelancer.Language = new CSharpLanguage();
        freelancer.DoWork();
        freelancer.EarnMoney();

        Console.Read();
    }
}