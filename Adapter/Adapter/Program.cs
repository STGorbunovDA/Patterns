/* Инфо

    * Паттерн Адаптер (Adapter) предназначен для преобразования интерфейса 
      одного класса в интерфейс другого. Благодаря реализации данного паттерна 
      мы можем использовать вместе классы с несовместимыми интерфейсами.

    * Когда надо использовать Адаптер?
      
    * Когда необходимо использовать имеющийся класс, но его интерфейс не соответствует потребностям

    * Когда надо использовать уже существующий класс совместно с другими классами, интерфейсы которых не совместимы
    
    * Участники

    * Target: представляет объекты, которые используются клиентом

    * Client: использует объекты Target для реализации своих задач

    * Adaptee: представляет адаптируемый класс, который мы хотели бы использовать у клиента вместо объектов Target

    * Adapter: собственно адаптер, который позволяет работать с объектами Adaptee как с объектами Target.

    * То есть клиент ничего не знает об Adaptee, он знает и использует только объекты Target. 
      И благодаря адаптеру мы можем на клиенте использовать объекты Adaptee как Target

    * Теперь разберем реальный пример. Допустим, у нас есть путешественник, который путешествует 
      на машине. Но в какой-то момент ему приходится передвигаться по пескам пустыни, где он не может 
      ехать на машине. Зато он может использовать для передвижения верблюда. Однако в классе 
      путешественника использование класса верблюда не предусмотрено, поэтому нам надо использовать адаптер:
*/


using Adapter.Classes;
using Adapter.Interfaces;

class Program
{
    static void Main(string[] args)
    {
        // путешественник
        Driver driver = new Driver();
        // машина
        Auto auto = new Auto();
        // отправляемся в путешествие
        driver.Travel(auto);
        // встретились пески, надо использовать верблюда
        Camel camel = new Camel();
        // используем адаптер
        ITransport camelTransport = new CamelToTransportAdapter(camel);
        // продолжаем путь по пескам пустыни
        driver.Travel(camelTransport);

        Console.Read();
    }
}