/* Инфо
    * Паттерн "Команда" (Command) позволяет инкапсулировать запрос на выполнение определенного действия 
      в виде отдельного объекта. Этот объект запроса на действие и называется командой. При этом объекты, 
      инициирующие запросы на выполнение действия, отделяются от объектов, которые выполняют это действие.

    * Команды могут использовать параметры, которые передают ассоциированную с командой информацию. 
      Кроме того, команды могут ставиться в очередь и также могут быть отменены.

    * Когда использовать команды?
    
        * Когда надо передавать в качестве параметров определенные действия, вызываемые в ответ на другие действия. 
          То есть когда необходимы функции обратного действия в ответ на определенные действия.

        * Когда необходимо обеспечить выполнение очереди запросов, а также их возможную отмену.

        * Когда надо поддерживать логгирование изменений в результате запросов. Использование логов может 
          помочь восстановить состояние системы - для этого необходимо будет использовать последовательность 
          запротоколированных команд.

    * В программах на C# команды находят довольно широкое применение. Так, в технологии WPF и других технологиях, 
      которые используют XAML и подход MVVM, на командах во многом базируется взаимодействие с пользователем. 
      В некоторых архитектурах, например, в архитектуре CQRS, команды являются одним из ключевых компонентов.

    * Нередко в роли инициатора команд выступают панели управления или кнопки интерфейса. Самая простая ситуация 
      - надо программно организовать включение и выключение прибора, например, телевизора. Решение данной задачи 
      с помощью команд могло бы выглядеть так:
*/

/*
    * Итак, в этой программе есть интерфейс команды - ICommand, есть ее реализация в виде класса TVOnCommand, 
      есть инициатор команды - класс Pult, некий прибор - пульт, управляющий телевизором. И есть получатель 
      команды - класс TV, представляющий телевизор. В качестве клиента используется класс Program.

    * При этом пульт ничего не знает об объекте TV. Он только знает, как отправить команду. В итоге мы получаем 
      гибкую систему, в которой мы легко можем заменять одни команды на другие, создавать последовательности 
      команд. Например, в нашей программе кроме телевизора появилась микроволновка, которой тоже неплохо было 
      бы управлять с помощью одного интерфейса. Для этого достаточно добавить соответствующие классы и установить команду:
*/

using Command.Classes;

class Program
{
    static void Main(string[] args)
    {
        Pult pult = new Pult();
        TV tv = new TV();
        pult.SetCommand(new TVOnCommand(tv));
        pult.PressButton();
        pult.PressUndo();

        Microwave microwave = new Microwave();
        // 5000 - время нагрева пищи
        pult.SetCommand(new MicrowaveCommand(microwave, 5000));
        pult.PressButton();

        Console.Read();
    }
}